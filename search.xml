<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手写C语言运行库一</title>
      <link href="/2021/07/03/%E6%89%8B%E5%86%99C%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E5%BA%93%E4%B8%80/"/>
      <url>/2021/07/03/%E6%89%8B%E5%86%99C%E8%AF%AD%E8%A8%80%E8%BF%90%E8%A1%8C%E5%BA%93%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  为了加深对于<strong>链接、装载与库</strong>的理解，这里特别根据<strong>《程序员的自我修养——链接、装载与库》</strong>书中的资料，手写一个支持<strong>C</strong>/<strong>C++</strong>的运行库——<strong>hawkCRT</strong>/<strong>hawkCRT++</strong></p><p>  总体上，我们希望<strong>hawkCRT</strong>具有如下的性质：</p><ul><li>以<strong>ANIS C</strong>的标准库为目标，尽可能接口相一致</li><li>具有入口函数<code>hawk_entry</code></li><li>具有基本的进程相关操作</li><li>简单支持堆操作<code>malloc</code>、<code>free</code></li><li>简单支持文件操作<code>fopen</code>、<code>fread</code>、<code>fwrite</code>、<code>fclose</code>、<code>fflush</code></li><li>简单支持字符串操作<code>strcpy</code>、<code>strlen</code>、<code>strcmp</code></li><li>简单支持输出操作<code>printf</code>、<code>sprintf</code></li><li>简单支持登记函数<code>atexit</code></li><li><p>支持跨平台</p><p>而对于<strong>hawkCRT++</strong>，我们希望具有如下性质：</p></li><li>简单支持<code>string</code>类的相关操作</li><li>简单支持<code>cout</code>对象的构造和析构</li><li>简单支持堆操作<code>new</code>、<code>delete</code></li></ul><h1 id="跨平台"><a href="#跨平台" class="headerlink" title="跨平台"></a>跨平台</h1><p>  使用宏实现源代码的跨平台——即同一个源代码可以在不同的平台上编译运行<br>  对于在Windows和Linux平台上代码不同的部分，通过如下结构<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">  <span class="comment">//Windows实现代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="comment">//Linux实现代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>  在Linux平台下，我们使用如下编译命令生成静态运行库，避免使用标准库和内置库相关符号<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$gcc</span> -c -m32 -fno-builtin -nostdlib -fno-stack-protector hawkCRT.c malloc.c stdio.c string.c format.c</span><br><span class="line"></span><br><span class="line"><span class="variable">$ar</span> -rs libhawkCRT.a hawkCRT.o malloc.o stdio.o string.o format.o</span><br></pre></td></tr></table></figure><br>  使用该标准库，使用如下命令进行链接和编译，从而生成使用该运行库的可执行文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$gcc</span> -c -m32 -ggdb -fno-builtin -nostdlib -fno-stack-protector test.c</span><br><span class="line">l</span><br><span class="line"><span class="variable">$d</span> -m elf_i386 -static -e hawk_crt_entry test.o libhawkCRT.a -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure></p><p>  而对于Windows平台，我们需要传递<code>WIN32</code>的宏，因此执行如下命令，完成Windows实现代码部分的编译和运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cl</span> /c /DWIN32 /GS- /utf-8 hawkCRT.c malloc.c stdio.c format.c string.c</span><br><span class="line"></span><br><span class="line"><span class="variable">$lib</span> hawkCRT.obj malloc.obj stdio.obj format.obj string.obj /OUT:libhawkCRT.lib</span><br></pre></td></tr></table></figure></p><p>  而由于Windows平台下使用了相关的系统调用，因此还生成测试文件时，需要引入一些其他库，其过程如下所示<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cl</span> /c /DWIN32 /utf-8 test.c</span><br><span class="line"></span><br><span class="line"><span class="variable">$link</span> test.obj libhawkCRT.lib kernel32.lib Advapi32.lib /NODEFAULTLIB /entry:hawk_crt_entry /OUT:test.exe</span><br></pre></td></tr></table></figure></p><h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><p>  根据《程序员的自我修养——链接、装载与库》的分析，C程序从<code>_start</code>/<code>mainCRTStartup</code>函数开始，经历堆栈初始化、IO初始化等相关初始化过程，最终跳转到指定的入口函数</p><p>  这里我们的<code>hawkCRT</code>同样具有类似的流程，其初始函数为<code>hawk_crt_entry</code>，默认的入口函数为<code>hawk_main</code>，整体流程如下图所示<br>  <img src="C运行库整体流程.PNG" alt="C运行库整体流程"></p><h2 id="入口函数实现"><a href="#入口函数实现" class="headerlink" title="入口函数实现"></a>入口函数实现</h2><p>  入口函数的大体框架如下所示<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hawk_crt_entry</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  相关初始化代码</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> ret = main(argc, argv);</span><br><span class="line">  <span class="built_in">exit</span>(ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  这里初始化代码需要完成参数初始化、堆初始化、IO初始化和参数初始化等工作</p><h3 id="参数初始化"><a href="#参数初始化" class="headerlink" title="参数初始化"></a>参数初始化</h3><p>  实际上，<strong>main</strong>函数往往也有参数，其为<code>int main(int argc, char *argv[]);</code>。其中，其参数在命令行调用时跟在程序名称后面。当我们进入程序入口时，即<code>hawk_crt_entry</code>时，其栈布局如下所示</p><p>  <img src="程序初始栈结构.PNG" alt="程序初始栈结构"></p><p>  我们将函数参数在入口处保存，之后传递给<strong>main</strong>即可<br>  对于<strong>Windows</strong>，调用<strong>系统API</strong>，即<strong>GetCommandLineA</strong>，依次进行解析即可<br>  对于<strong>Linux</strong>，通过获取<strong>esp</strong>，进行设置即可。这里需要注意的是，由于这里设置入口函数就是<strong>hawk_ctr_entry</strong>，因此栈中无须返回地址；但是其仍然是一个函数，因此栈中仍然包含有旧<strong>ebp</strong>，则<strong>argc</strong>位于<strong>ebp + 4</strong>处，<strong>argv</strong>位于<strong>ebp + 8</strong>处</p><h3 id="堆初始化"><a href="#堆初始化" class="headerlink" title="堆初始化"></a>堆初始化</h3><p>  实际上对于堆初始化，即完成管理堆空间的相关数据结构的初始化。</p><p>  这里为了实现的方便，将堆大小固定为<strong>32MB</strong>，并使用<strong>位图</strong>管理堆空间，其中<strong>1bit</strong>对应<strong>1024Bytes</strong>，也就是需要<strong>4096</strong>个char进行管理。而每一个分配的是chunk对象，其结构如下所示<br>  <img src="chunk结构.PNG" alt="chunk结构"></p><p>  其中，整个chunk可以由<strong>chunk头</strong>和<strong>chunk体</strong>构成。<br>  chunk头用于保存该chunk的大小信息，其添加了<strong>magic</strong>字段，由<strong>chunkAddr</strong>、<strong>size</strong>字段和系统生成的随机数异或的值构成，从而避免缓冲区溢出；而<strong>size</strong>字段存储的是整个chunk的字节大小。<br>  chunk体则是最后分配到的可使用的内存空间</p><p>  则对于堆的初始化，其步骤如下：</p><ol><li>调用系统的API，申请<strong>32MB</strong>的固定空间作为运行库的堆空间</li><li>调用系统的API，生成<strong>magic</strong>字段所需要的随机数</li><li>创建并初始化<strong>位图</strong>数据结构。需要注意的是，<strong>位图</strong>本身也属于堆空间，初始化的时候，<strong>位图</strong>所在的空间应该在<strong>位图</strong>中表明已被使用</li></ol><p>  在申请堆空间时，其步骤如下：</p><ol><li>根据位图寻找足够大小的连续空闲内存</li><li>设置该片内存的<strong>magic</strong>字段和<strong>size</strong>字段</li><li>设置该片内存的<strong>位图</strong>状态</li><li>返回该片内存的<strong>returnAddr</strong>地址，作为申请的可使用内存空间的起始值</li></ol><p>  在释放堆空间时，其步骤如下：</p><ol><li>判断释放地址是否在有效堆空间内。即是否在申请的<strong>32MB</strong>内存空间中</li><li>判断释放地址对应的chunk是否为有效chunk。即chunk对应的<strong>位图</strong>状态是否为已使用、<strong>magic</strong>字段是否正确</li><li>重置该内存对应的<strong>位图</strong>状态</li></ol><p>  堆相关的关键代码如下所示<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by hawk on 7/4/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hawkCRT.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用来管理堆空间的相关信息</span></span><br><span class="line"><span class="comment"> * 包含 起始地址、结束地址、运行生成随机值、位图  等参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEAPSIZE ((unsigned int)32 * 1024 * 1024)     <span class="comment">//堆空间 32MB</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PERSIZE ((unsigned int)1024)                  <span class="comment">//即分配的最小单位为1024B，也是位图中1bit管理的空间大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTEPERBIT ((unsigned int)8)                 <span class="comment">//1byte对应的bit个数，一般都是8</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITMAPSIZE ((HEAPSIZE) / BYTEPERBIT / PERSIZE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE_SZ ((unsigned int)(sizeof(unsigned int) / sizeof(char)))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * chunk的相关操作，方便对chunk进行各种操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// base + offset的地址值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMOFFSET(base, offset) ((void*)((unsigned char*)(base) + (unsigned int)(offset)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * bitmap中byte从0计数，bit从0计数</span></span><br><span class="line"><span class="comment"> * 这里直接通过指针操作，从而可以通过宏进行设置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTEGETBIT(byte, idx) ((unsigned char)(*((unsigned char*)(byte)) &gt;&gt; (7 - (unsigned int)(idx))) &amp; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTESETBIT(byte, idx) (*(unsigned char*)(byte) |= (1 &lt;&lt; (7 - (idx))))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTECLEARBIT(byte, idx) (*(unsigned char*)(byte) &amp;= ~(1 &lt;&lt; (7 - (idx))))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITMAPGETBIT(bitmap, idx) (BYTEGETBIT( ((unsigned char*)bitmap) + ((idx) / 8) , (idx) % 8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITMAPSETBIT(bitmap, idx) (BYTESETBIT( ((unsigned char*)bitmap) + ((idx) / 8) , (idx) % 8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BITMAPCLEARBIT(bitmap, idx) (BYTECLEARBIT( ((unsigned char*)bitmap) + ((idx) / 8) , (idx) % 8))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHUNKALLIGN (~(PERSIZE - 1))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADJUSTSIZE(mem) (((unsigned int)(mem) + PERSIZE - 1 + SIZE_SZ * 2) &amp; (CHUNKALLIGN))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHUNKTOIDX(base, chunk) ((unsigned int)((unsigned int)((unsigned char*)(chunk) - (unsigned char*)(base)) / PERSIZE))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IDXTOCHUNK(base, idx) ((void*)((unsigned char*)(base) + ((unsigned int)(idx)) * PERSIZE))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MEMTOCHUNK(mem) ((void*)((unsigned char*)(mem) - (unsigned int)(SIZE_SZ * 2)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CHUNKTOMEM(chunk) ((void*)((unsigned char*)(chunk) + (unsigned int)(SIZE_SZ * 2)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETCHUNKMAGIC(chunk, magic) (*(unsigned int*)(chunk) = (unsigned int)(magic))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SETCHUNKSIZE(chunk, size) (*(unsigned int*)((unsigned char*)(chunk) + SIZE_SZ) = (unsigned int)(size))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETCHUNKMAGIC(chunk) (*(unsigned int*)(chunk))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GETCHUNKSIZE(chunk) (*((unsigned int*)((unsigned char*)chunk + SIZE_SZ)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">MSTATE</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> bitmap[BITMAPSIZE];</span><br><span class="line">&#125; Mstate;</span><br><span class="line"><span class="keyword">static</span> Mstate *mstate = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  申请32MB地址空间作为内存空间</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">request_heap</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//  生成随机数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">generate_random</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="comment">//  设置bitmap的位，用来申请堆空间</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setbit</span><span class="params">(<span class="keyword">void</span> *base, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  申请32MB地址空间作为内存空间</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> *<span class="title">request_heap</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *heapAddr = <span class="literal">NULL</span>;  <span class="comment">// 堆空间的起始地址</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    heapAddr = VirtualAlloc(<span class="number">0</span>, HEAPSIZE, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);</span><br><span class="line">    <span class="keyword">if</span>(heapAddr == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * brk(0)</span></span><br><span class="line"><span class="comment">     * 通过调用32位的syscall，获取当前的break位置。当asm修改寄存器值时，一定添加clobber，否则可能原本寄存器包含重要的值会被覆盖</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x2d, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl $0, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">                         : <span class="string">&quot;=r&quot;</span>(heapAddr) :: <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *heapEndAddr = MEMOFFSET(heapAddr, HEAPSIZE), *addr = heapAddr;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * brk(heapEndArrd)</span></span><br><span class="line"><span class="comment">     * 继续调用32位的syscall，重新设置break的位置，从而这段空间作为堆空间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x2d, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">                         : <span class="string">&quot;=r&quot;</span>(addr) : <span class="string">&quot;r&quot;</span>(heapEndAddr) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(addr != heapEndAddr) &#123; <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> heapAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  生成随机数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">generate_random</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> random = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    HCRYPTPROV hCryptProv;</span><br><span class="line">    CryptAcquireContext(&amp;hCryptProv, <span class="literal">NULL</span>, <span class="literal">NULL</span>, PROV_RSA_FULL, <span class="number">0</span>);</span><br><span class="line">    CryptGenRandom(hCryptProv, <span class="number">4</span>, (BYTE*)(&amp;random));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * fd = open(&quot;/dev/random&quot;, &quot;r&quot;)</span></span><br><span class="line"><span class="comment">     * 调用32位的syscall，打开文件，&quot;r&quot;用0表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *file = <span class="string">&quot;/dev/random&quot;</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> fd = <span class="number">-1</span>, flag = O_RDONLY;</span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x5, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %2, %%ecx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">    : <span class="string">&quot;=r&quot;</span>(fd) : <span class="string">&quot;r&quot;</span>(file), <span class="string">&quot;r&quot;</span>(flag) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * read(fd, &amp;random, 4)</span></span><br><span class="line"><span class="comment">     * 调用32位的syscall，读取数据到random值中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x3, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %0, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %1, %%ecx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl $4, %%edx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">    :: <span class="string">&quot;r&quot;</span>(fd), <span class="string">&quot;r&quot;</span>(&amp;random) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>, <span class="string">&quot;%edx&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * close(fd)</span></span><br><span class="line"><span class="comment">     * 调用32位的syscall，关闭文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x6, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %0, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">    :: <span class="string">&quot;r&quot;</span>(fd): <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> random;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  设置bitmap的位，用来申请堆空间</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setbit</span><span class="params">(<span class="keyword">void</span> *base, <span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> idx = CHUNKTOIDX(mstate, base);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(size + idx &gt;= HEAPSIZE) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123; BITMAPSETBIT(mstate-&gt;bitmap, idx + i); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  申请堆空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">malloc</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    size = ADJUSTSIZE(size) / PERSIZE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = size; i &lt;= HEAPSIZE; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = i - size;</span><br><span class="line">        <span class="keyword">for</span>(; j &lt; i; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(BITMAPGETBIT(mstate-&gt;bitmap, j) != <span class="number">0</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(j &lt; i) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">void</span> *chunk = IDXTOCHUNK(mstate, i - size);</span><br><span class="line">        SETCHUNKMAGIC(chunk, mstate-&gt;random);</span><br><span class="line">        SETCHUNKSIZE(chunk, size * PERSIZE);</span><br><span class="line">        setbit(chunk, size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> CHUNKTOMEM(chunk);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放堆空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *mem)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk = MEMTOCHUNK(mem);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> idx = CHUNKTOIDX(mstate, chunk), size = GETCHUNKSIZE(chunk) / PERSIZE;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123; BITMAPCLEARBIT(mstate-&gt;bitmap, idx + i); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  初始化堆空间，包括申请堆地址空间，完成相关的数据结构初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hawk_crt_heap_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *heapBase = request_heap();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 起始位置为 Mstate 结构，用来保存相关的信息</span></span><br><span class="line">    mstate = (Mstate *)heapBase;</span><br><span class="line">    mstate-&gt;random = generate_random();</span><br><span class="line">    setbit(mstate, ADJUSTSIZE(<span class="keyword">sizeof</span>(Mstate) / <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>)) / PERSIZE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="IO初始化"><a href="#IO初始化" class="headerlink" title="IO初始化"></a>IO初始化</h3><p>  这里为了实现方便，仅仅包含基本的文件操作功能，实现简单的缓冲功能，因此整个IO部分实现起来的思路就很简单——简单包装相关的<strong>文件句柄/文件描述符</strong>，并根据这些信息，调用系统提供的API，实现相关的IO操作。其中包装的<strong>文件句柄/文件描述符</strong>基本结构如下</p><p>  <img src="FILE结构.PNG" alt="FILE结构"> </p><p>在打开文件时，其步骤如下：</p><ol><li>调用<strong>系统API</strong>，即<strong>CreateFileA</strong>/<strong>open</strong>，返回相关的<strong>HANDLE</strong>/<strong>File Descriptro</strong></li><li>根据传递的参数和系统API返回值，生成上面的<strong>FILE</strong>结构</li></ol><p>在文件写入数据时，其步骤如下：</p><ol><li>如果相关的<strong>FILE</strong>结构中缓冲已满，则调用<strong>系统API</strong>，即<strong>WriteFile</strong>/<strong>write</strong>，清空缓冲至文件并重新设置缓冲</li><li>将数据保存至<strong>FILE</strong>结构的缓冲中，数据大小为待写入数据大小和缓冲区大小的最小值。如果这一步未将待写入数据处理完，则截取未完成的待写入数据，并重新从1. 开始</li></ol><p>这里由于文件写入数据时会先写入缓冲区中，再等缓冲区满才写入文件中，因此需要刷新缓冲区数据至文件，其步骤如下：</p><ol><li>检查<strong>FILE</strong>结构中<strong>flag</strong>字段，确保是写入类型的</li><li>直接调用<strong>系统API</strong>，即<strong>WriteFile</strong>/<strong>write</strong>，将相关<strong>FILE</strong>结构中的缓冲区数据全部写入文件</li></ol><p>从文件读入数据时，其步骤如下：</p><ol><li>如果相关的<strong>FILE</strong>结构中缓冲已空，则调用<strong>系统API</strong>，即<strong>ReadFile</strong>/<strong>read</strong>，读取数据到缓冲区。这里将数据从缓冲区中间开始放置，方便后面格式化字符串回退字符时重新放置入缓冲区中。</li><li>将<strong>FILE</strong>结构的缓冲区数据保存至待读入空间中，其保存的数据量为待读入数据和缓冲区数据的最小值。如果这一步保存的数据量小于待读入的数据量，则重新从1. 开始</li></ol><p>最后，关闭已打开的文件，其步骤如下：</p><ol><li>如果相关的<strong>FILE</strong>结构是写入类型的，调用前面的刷新缓冲区功能，确保所有数据已经写入文件</li><li>根据相关的<strong>FILE</strong>结构，调用<strong>系统API</strong>，即<strong>CloseHandle</strong>/<strong>close</strong>，完成文件的关闭</li></ol><p>而对于IO的初始化，其主要是将系统默认打开的<strong>标准输入</strong>、<strong>标准输出</strong>和<strong>标准错误输出</strong>文件包装为相关的<strong>FILE</strong>结构即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by hawk on 7/4/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hawkCRT.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFSIZE (0x300)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  生成包装的文件描述副</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FILE *<span class="title">generate_file_descriptor</span><span class="params">(HANDLE fd, <span class="keyword">unsigned</span>  <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">//  生成包装的文件描述副</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> FILE *<span class="title">generate_file_descriptor</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">int</span> flag)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FILE *file = (FILE*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(FILE) + BUFSIZE);</span><br><span class="line">    file-&gt;fd = fd;</span><br><span class="line">    file-&gt;buf = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)file + BUFSIZE;</span><br><span class="line">    file-&gt;bufAvailable = file-&gt;bufUnavailable = <span class="number">0</span>;</span><br><span class="line">    file-&gt;bufSize = BUFSIZE;</span><br><span class="line">    file-&gt;flag = flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  指定权限打开文件</span></span><br><span class="line"><span class="function">FILE *<span class="title">fopen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *filename, <span class="keyword">const</span> <span class="keyword">char</span> *mode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    HANDLE fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(compare(mode, <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        flag |= O_RDONLY;</span><br><span class="line">        fd = CreateFileA(filename, GENERIC_READ, <span class="number">0</span>, <span class="number">0</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(compare(mode, <span class="string">&quot;w&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        flag |= O_WRONLY;</span><br><span class="line">        fd = CreateFileA(filename, GENERIC_WRITE, <span class="number">0</span>, <span class="number">0</span>, CREATE_ALWAYS, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fd == INVALID_HANDLE_VALUE) &#123; <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(compare(mode, <span class="string">&quot;r&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        flag |= O_RDONLY;</span><br><span class="line">        __asm__ __volatile__(<span class="string">&quot;movl $0x5, %%eax\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %2, %%ecx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">        : <span class="string">&quot;=r&quot;</span>(fd) : <span class="string">&quot;r&quot;</span>(filename), <span class="string">&quot;r&quot;</span>(O_RDONLY) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>, <span class="string">&quot;%edx&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(compare(mode, <span class="string">&quot;w&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        flag |= O_WRONLY ;</span><br><span class="line">        <span class="keyword">int</span> access = <span class="number">00700</span>;</span><br><span class="line">        __asm__ __volatile__(<span class="string">&quot;movl $0x5, %%eax\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %2, %%ecx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %3, %%edx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">        : <span class="string">&quot;=r&quot;</span>(fd) : <span class="string">&quot;r&quot;</span>(filename), <span class="string">&quot;r&quot;</span>(O_WRONLY | O_CREAT | O_TRUNC), <span class="string">&quot;g&quot;</span>(access) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>, <span class="string">&quot;%edx&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123; <span class="keyword">return</span> <span class="literal">NULL</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> generate_file_descriptor(fd, flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  关闭打开的文件，并释放相关资源</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span><span class="params">(FILE *file)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(file == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(file-&gt;flag == O_WRONLY) &#123; fflush(file); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    <span class="keyword">int</span> res = CloseHandle(file-&gt;fd);</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="number">0</span>) &#123; <span class="keyword">return</span> FCLOSE_ERROR; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x6, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">    : <span class="string">&quot;=r&quot;</span>(res): <span class="string">&quot;r&quot;</span>(file-&gt;fd): <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(res != <span class="number">0</span>) &#123; <span class="keyword">return</span> FCLOSE_ERROR; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如果当前缓冲区为空，则读取半满，为了后面格式化字符串读取回退方便</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果当前缓冲区非空，则读取MIN(size， 缓冲区可用大小)的内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 如果返回值为-1，表示无输入；否则可以继续调用fread_from_buf</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fread_from_buf</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">int</span> size, FILE *stream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stream-&gt;bufAvailable == stream-&gt;bufUnavailable) &#123;</span><br><span class="line">        stream-&gt;bufAvailable = stream-&gt;bufUnavailable = stream-&gt;bufSize / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> read_size = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">        ReadFile(stream-&gt;fd, stream-&gt;buf + stream-&gt;bufAvailable, stream-&gt;bufSize - stream-&gt;bufUnavailable, &amp;read_size, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!read_size) &#123; <span class="keyword">return</span> <span class="number">-1</span>;&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        __asm__ __volatile__(<span class="string">&quot;movl $0x3, %%eax\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %2, %%ecx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %3, %%edx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">        : <span class="string">&quot;=r&quot;</span>(read_size): <span class="string">&quot;r&quot;</span>(stream-&gt;fd), <span class="string">&quot;r&quot;</span>(stream-&gt;buf + stream-&gt;bufAvailable), <span class="string">&quot;g&quot;</span>(stream-&gt;bufSize - stream-&gt;bufUnavailable) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>, <span class="string">&quot;%edx&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!read_size) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        stream-&gt;bufUnavailable += read_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> buf_size = stream-&gt;bufUnavailable - stream-&gt;bufAvailable;</span><br><span class="line">    <span class="keyword">int</span> read_size = buf_size &lt; size ? buf_size : size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; read_size; ++i) &#123; ((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst)[i] = stream-&gt;buf[stream-&gt;bufAvailable++]; &#125;</span><br><span class="line">    <span class="keyword">return</span> read_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  从文件中读取数据， 返回读取到的字节个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fread</span><span class="params">(<span class="keyword">void</span> *dst, <span class="keyword">int</span> size, <span class="keyword">int</span> count, FILE *stream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(size &lt;= <span class="number">0</span> || count &lt;= <span class="number">0</span> || stream == <span class="literal">NULL</span> || stream-&gt;flag != O_RDONLY) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> read_size = <span class="number">0</span>, need_size = size * count;</span><br><span class="line">    <span class="keyword">while</span>(need_size) &#123;</span><br><span class="line">        <span class="keyword">int</span> read_from_buf_size = fread_from_buf((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst + read_size, need_size, stream);</span><br><span class="line">        <span class="keyword">if</span>(read_from_buf_size &lt; <span class="number">0</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line"></span><br><span class="line">        read_size += read_from_buf_size;</span><br><span class="line">        need_size -= read_from_buf_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> read_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * [0, stream-&gt;bufAvailable)表示已经写入文件中的数据，[stream-&gt;bufAvailable, stream-&gt;bufUnavailable)表示还未写入文件中的数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 返回值为-1表示未正常写入数据，否则返回写入的数据个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fwrite_to_buf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *dst, <span class="keyword">int</span> size, FILE *stream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> write_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(stream-&gt;bufUnavailable == stream-&gt;bufSize) &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">        WriteFile(stream-&gt;fd, stream-&gt;buf + stream-&gt;bufAvailable, stream-&gt;bufUnavailable - stream-&gt;bufAvailable, &amp;write_size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        __asm__ __volatile__(<span class="string">&quot;movl $0x4, %%eax\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %2, %%ecx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %3, %%edx\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                             <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">        : <span class="string">&quot;=r&quot;</span>(write_size): <span class="string">&quot;r&quot;</span>(stream-&gt;fd), <span class="string">&quot;r&quot;</span>(stream-&gt;buf + stream-&gt;bufAvailable), <span class="string">&quot;g&quot;</span>(stream-&gt;bufUnavailable - stream-&gt;bufAvailable) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>, <span class="string">&quot;%edx&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(write_size == stream-&gt;bufUnavailable - stream-&gt;bufAvailable) &#123;</span><br><span class="line">            stream-&gt;bufAvailable = stream-&gt;bufUnavailable = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            stream-&gt;bufAvailable += write_size;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> buf_size = stream-&gt;bufSize - stream-&gt;bufUnavailable;</span><br><span class="line">    write_size = buf_size &lt; size ? buf_size : size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; write_size; ++i) &#123; stream-&gt;buf[stream-&gt;bufUnavailable++] = ((<span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst)[i]; &#125;</span><br><span class="line">    <span class="keyword">return</span> write_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  将数据写入到文件中，返回成功写入的字节个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fwrite</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *dst, <span class="keyword">int</span> size, <span class="keyword">int</span> count, FILE *stream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stream == <span class="literal">NULL</span> || size &lt;= <span class="number">0</span> || count &lt;= <span class="number">0</span> || stream-&gt;flag != O_WRONLY) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> need_size = size * count, write_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(need_size) &#123;</span><br><span class="line">        <span class="keyword">int</span> write_to_buf_size = fwrite_to_buf((<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>*)dst + write_size, need_size, stream);</span><br><span class="line">        <span class="keyword">if</span>(write_to_buf_size &lt; <span class="number">0</span>) &#123; <span class="keyword">break</span>; &#125;</span><br><span class="line"></span><br><span class="line">        write_size += write_to_buf_size;</span><br><span class="line">        need_size -= write_to_buf_size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> write_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  刷新输出IO的缓冲区</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fflush</span><span class="params">(FILE *stream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stream == <span class="literal">NULL</span> || stream-&gt;flag != O_WRONLY || stream-&gt;bufAvailable == stream-&gt;bufUnavailable) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> write_size = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    WriteFile(stream-&gt;fd, stream-&gt;buf + stream-&gt;bufAvailable, stream-&gt;bufUnavailable - stream-&gt;bufAvailable, &amp;write_size, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    __asm__ __volatile__(<span class="string">&quot;movl $0x4, %%eax\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %1, %%ebx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %2, %%ecx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %3, %%edx\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;int $0x80\n\t&quot;</span></span><br><span class="line">                         <span class="string">&quot;movl %%eax, %0\n\t&quot;</span></span><br><span class="line">    : <span class="string">&quot;=r&quot;</span>(write_size): <span class="string">&quot;r&quot;</span>(stream-&gt;fd), <span class="string">&quot;r&quot;</span>(stream-&gt;buf + stream-&gt;bufAvailable), <span class="string">&quot;g&quot;</span>(stream-&gt;bufUnavailable - stream-&gt;bufAvailable) : <span class="string">&quot;%eax&quot;</span>, <span class="string">&quot;%ebx&quot;</span>, <span class="string">&quot;%ecx&quot;</span>, <span class="string">&quot;%edx&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(write_size == stream-&gt;bufUnavailable - stream-&gt;bufAvailable) &#123;</span><br><span class="line">        stream-&gt;bufAvailable = stream-&gt;bufUnavailable = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        stream-&gt;bufAvailable += write_size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FILE *<span class="built_in">stdin</span>, *<span class="built_in">stdout</span>, *<span class="built_in">stderr</span>;          <span class="comment">//  标准输入、标准输出、标准错误输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  初始化stdin、stdout、stderr</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hawk_crt_io_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    <span class="built_in">stdin</span> = generate_file_descriptor(GetStdHandle(STD_INPUT_HANDLE), O_RDONLY);</span><br><span class="line">    <span class="built_in">stdout</span> = generate_file_descriptor(GetStdHandle(STD_OUTPUT_HANDLE), O_WRONLY);</span><br><span class="line">    <span class="built_in">stderr</span> = generate_file_descriptor(GetStdHandle(STD_ERROR_HANDLE), O_WRONLY);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">stdin</span> = generate_file_descriptor(<span class="number">0</span>, O_RDONLY);</span><br><span class="line">    <span class="built_in">stdout</span> = generate_file_descriptor(<span class="number">1</span>, O_WRONLY);</span><br><span class="line">    <span class="built_in">stderr</span> = generate_file_descriptor(<span class="number">2</span>, O_WRONLY);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><p>  为了最基本的输入、输出功能，我们实现一个简易版的<strong>printf</strong>/<strong>fprintf</strong>输出函数，以及<strong>scanf</strong>/<strong>fscanf</strong>输入函数，用来交互。这些都是最简易版的，基本只包括<strong>%s</strong>和<strong>%d</strong>参数，以方便实现。</p><p>  首先，由于上面这些函数都是<strong>变长参数</strong>函数，因此我们需要完善<strong>变长参数</strong>功能。C语言支持定义具有<strong>变长参数</strong>的函数，对于不确定的参数，使用<code>[returnType] [functionName]([type1] arg1, ...)</code>进行声明，即使用省略号完成变参的声明。<br>  由于Windows环境的msvc编译器已经内置了相关的<strong>变长参数</strong>访问的操作，这里为了兼容，声明如下的Linux宏进行统一操作<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_list (void*)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_start(ap, arg) ((ap) = (va_list)&amp;(arg) + sizeof((arg)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_arg(ap, t)     (*((t)*)(((ap) += sizeof(t)) - sizeof(t)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_end(ap)        ((ap) = NULL)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">void</span> *format, ...)</span> </span>&#123;</span><br><span class="line">va_list args;</span><br><span class="line">va_start(args, format);</span><br><span class="line"><span class="keyword">int</span> arg1 = va_arg(args, <span class="keyword">int</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  可以看到，其仅仅是根据C语言传参的约定，即栈从高地址向低地址生长，而函数参数从右向左入栈。则从低地址到高地址遍历遍历栈相当于从左到右遍历参数。</p><p>  对于<strong>printf</strong>和<strong>fprintf</strong>，这里仅仅实现了<strong>%s</strong>和<strong>%d</strong>控制符，因此实现起来很方便——遍历<strong>format</strong>值，遇到控制符，则输出相关的变参；否则直接输出即可。</p><p>  对于<strong>scanf</strong>和<strong>fscanf</strong>，其稍微有一些麻烦——我们不知道一次需要读取多少字节，只能读取一个字节，经过判断后完成放回还是继续读取。由于前面实现读取时特意将数据从缓冲区中间开始放置，则回退字符串还是比较简单的，其过程如下所示：</p><ol><li>确认相关<strong>FILE</strong>结构的<strong>bufAvailable</strong>字段是否为0；否则返回0，表示无法进行回退</li><li><p>将传入字符回退至缓冲区的<strong>bufAvailable</strong>处</p><p>这里还需要特别说明一下，由于<strong>Windows</strong>下的换行符是<code>\r\n</code>，因此在<strong>scanf</strong>或<strong>fscanf</strong>时需要注意分割不同输入的处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by hawk on 7/9/21.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;hawkCRT.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  定义变长参数相关的操作</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_list void *</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_start(ap, arg) ((ap) = (va_list)&amp;(arg) + sizeof((arg)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_arg(ap, t)     (*(t*)(((ap) += sizeof(t)) - sizeof(t)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> va_end(ap)        ((ap) = NULL)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">vprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> write_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">void</span> *chr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; format[i]; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(format[i] == <span class="string">&#x27;%&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (format[++i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;%&#x27;</span>:</span><br><span class="line">                    write_size += fwrite(format + i, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    chr = va_arg(args, <span class="keyword">char</span>*);</span><br><span class="line">                    write_size += fwrite(chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">strlen</span>(chr) - <span class="number">1</span>, stream);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                    chr = itoa(va_arg(args, <span class="keyword">int</span>), <span class="built_in">malloc</span>(<span class="number">32</span>), <span class="number">10</span>);</span><br><span class="line">                    write_size += fwrite(chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="built_in">strlen</span>(chr) - <span class="number">1</span>, stream);</span><br><span class="line">                    <span class="built_in">free</span>(chr);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    write_size += fwrite(format + (--i), <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            write_size += fwrite(format + i, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">    fflush(stream);</span><br><span class="line">    <span class="keyword">return</span> write_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  向标准输出格式化输出数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vprintf</span>(<span class="built_in">stdout</span>, format, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  向打开的文件流中格式化输出数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fprintf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">vprintf</span>(stream, format, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  将字符进行回退</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ungetc</span><span class="params">(<span class="keyword">int</span> chr, FILE *stream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(stream == <span class="literal">NULL</span> || !stream-&gt;bufAvailable) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    stream-&gt;buf[--stream-&gt;bufAvailable] = (<span class="keyword">unsigned</span> <span class="keyword">char</span>)chr;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">vscanf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, va_list args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> read_size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> chr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">    <span class="keyword">int</span> val, idx, flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; format[i]; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(format[i] == <span class="string">&#x27;%&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (format[++i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                    <span class="comment">//  读取字符串</span></span><br><span class="line">                    str = va_arg(args, <span class="keyword">char</span>*);</span><br><span class="line">                    idx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//清除所有空格字符</span></span><br><span class="line">                    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                        fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                        <span class="keyword">if</span>(chr == <span class="string">&#x27; &#x27;</span> || chr == <span class="string">&#x27;\t&#x27;</span> || chr == <span class="string">&#x27;\n&#x27;</span> || chr == <span class="string">&#x27;\r&#x27;</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">                        ungetc(chr, stream);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                        fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                        <span class="keyword">if</span>(chr == <span class="string">&#x27; &#x27;</span> || chr == <span class="string">&#x27;\t&#x27;</span> || chr == <span class="string">&#x27;\n&#x27;</span> || chr == <span class="string">&#x27;\r&#x27;</span>) &#123;</span><br><span class="line">                            ungetc(chr, stream);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        str[idx++] = chr;</span><br><span class="line">                    &#125;</span><br><span class="line">                    str[idx] = <span class="number">0</span>;</span><br><span class="line">                    ++read_size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                    <span class="comment">//  读取数字</span></span><br><span class="line">                    flag = val = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">//清除所有空格字符</span></span><br><span class="line">                    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                        fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                        <span class="keyword">if</span>(chr == <span class="string">&#x27; &#x27;</span> || chr == <span class="string">&#x27;\t&#x27;</span> || chr == <span class="string">&#x27;\n&#x27;</span> || chr == <span class="string">&#x27;\r&#x27;</span>) &#123; <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">                        ungetc(chr, stream);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//读取符号信息</span></span><br><span class="line">                    fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                    <span class="keyword">if</span>(chr == <span class="string">&#x27;-&#x27;</span>) &#123; flag = <span class="number">1</span>; &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(chr == <span class="string">&#x27;+&#x27;</span>) &#123;;&#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123; ungetc(chr, stream); &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">                        fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                        <span class="keyword">if</span>(chr &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; chr &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                            val = (val * <span class="number">10</span>) + chr - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        ungetc(chr, stream);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    *(va_arg(args, <span class="keyword">int</span>*)) = flag ? (-val) : val;</span><br><span class="line">                    ++read_size;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    --i;</span><br><span class="line">                    fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">                    <span class="keyword">if</span>(chr != format[i]) &#123;</span><br><span class="line">                        ungetc(chr, stream);</span><br><span class="line">                        <span class="keyword">return</span> read_size;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            fread(&amp;chr, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">1</span>, stream);</span><br><span class="line">            <span class="keyword">if</span>(chr != format[i]) &#123;</span><br><span class="line">                ungetc(chr, stream);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> read_size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  从标准输入中格式化获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="keyword">return</span> vscanf(<span class="built_in">stdin</span>, format, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  从打开的文件流中格式化获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fscanf</span><span class="params">(FILE *stream, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, format);</span><br><span class="line">    <span class="keyword">return</span> vscanf(stream, format, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>  最后，这里给出<a href="hawkCRT.rar">源代码、构建脚本和测试文件</a>，方便进行改进</p>]]></content>
      
      
      <categories>
          
          <category> 手写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手写 </tag>
            
            <tag> C语言运行库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>manjaro配置</title>
      <link href="/2021/06/05/manjaro%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/06/05/manjaro%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  从manjaro的U盘启动设置开始，介绍manjaro系统的整个安装、配置过程</p><h1 id="制作启动U盘"><a href="#制作启动U盘" class="headerlink" title="制作启动U盘"></a>制作启动U盘</h1><p>  在这里顺便介绍一些系统启动、磁盘分区的相关基础知识，最后根据这些知识，完成启动u盘的安装</p><h2 id="系统启动"><a href="#系统启动" class="headerlink" title="系统启动"></a>系统启动</h2><p>  系统启动，本质上是识别并读取存储上的数据信息，并完成操作系统的加载，最后将计算机的控制权转交给操作系统。<br>  因此，系统启动的过程，即首先区分存储(往往是硬盘或U盘)的分区，其次执行启动分区的代码，完成系统分区中的操作系统加载，最后将计算机的控制权转交即可。。<br>  就目前来说，系统启动有两种常用的模式——<strong>Legacy mode</strong>和<strong>UEFI mode</strong></p><h3 id="Legacy-mode-BIOS-MBR"><a href="#Legacy-mode-BIOS-MBR" class="headerlink" title="Legacy mode(BIOS/MBR)"></a>Legacy mode(BIOS/MBR)</h3><p>Legacy mode，即通过MBR/BIOS进行引导的传统模式。BIOS只能识别设备，无法识别分区和文件信息。因此对应的引导的流程如下：</p><ul><li>从ROM执行BIOS代码进行自检</li><li>读取主引导记录(MBR) ：即按照指定的设备顺序，读取设备的第一个扇区<ol><li>如果其最后两个字节为<strong>55AAH</strong>，则读入该扇区，该扇区中包含设备的分区信息。之后将计算机控制权交给该主引导扇区的引导程序即可。</li><li>如果不相等，则继续尝试其他设备</li></ol></li></ul><p>这里借鉴<a href="https://zhuanlan.zhihu.com/p/26098509">知乎前辈的图</a>，给出主引导扇区的格式</p><p><img src="主引导扇区格式.png" alt="主引导扇区格式.png"></p><p>上面的图片很清晰的说明了Legacy mode下区分存储分区的方式，则当读入主引导分区并将计算机控制权交给引导程序后，可以获取分区情况，从而可以继续载入启动分区的代码，最终加载系统分区中的操作系统。这里同样借用<a href="https://zhuanlan.zhihu.com/p/31365115">知乎前辈的图</a>如下所示</p><p><img src="legacy-mode.png" alt="Legacy mode启动过程"></p><h3 id="UEFI-mode-UEFI-GPT"><a href="#UEFI-mode-UEFI-GPT" class="headerlink" title="UEFI mode(UEFI/GPT)"></a>UEFI mode(UEFI/GPT)</h3><p>UEFI mode，实际上是Legacy mode的替代品。与Legacy mode不同的是，UEFI mode不仅可以识别设备，其同时可以识别ROM、分区表和文件系统。因此对应的引导流程如下：</p><ul><li>运行ROM中的Pre-EFI初始化模块进行自检</li><li>加载位于ROM中的DXE<strong>(Driver Execution Environment)</strong><ol><li>枚举并加载位于各个设备ROM中的<strong>设备驱动</strong>，从而可以识别所有的设备信息</li><li>对<strong>磁盘设备</strong>，使用ROM中驱动识别磁盘上的<code>MBR</code>或<code>GPT</code><strong>(GUID Partition Table)</strong>分区表，从而获取磁盘的分区信息</li><li>对于<strong>每个</strong>分区，使用ROM或EFI系统分区中的文件系统驱动，从而完成分区中文件系统的加载。</li></ol></li><li>将计算机控制权交给EFI系统分区的引导程序即可</li></ul><p>实际上<code>MBR</code>和<code>GPT</code>都从磁盘的第一个扇区开始，其中GPT分区表的格式如所示</p><p><img src="gpt分区表格式.png" alt="gpt分区表格式"></p><p>可以看到，如果主板不支持UEFI，则其还是可以通过PMBR结构，实现类似于<strong>Legacy mode</strong>的引导；否则，其通过<strong>Partition Table</strong>，完成分区的识别，从而通过文件系统驱动，获取ESP分区的指定引导程序并完成引导，如下所示</p><p><img src="uefi-mode.png" alt="uefi-mode"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这里再说一下个人的理解——实际上<strong>Legacy mode</strong>和<strong>UEFI mode</strong>本质没有区别，都是加载引导程序，从而去引导操作系统的加载。其区别在于</p><ul><li>ROM中的BIOS无法识别设备上的分区、文件等数据。因此将引导程序放在主引导扇区的固定位置，则BIOS将<strong>计算机的控制权转交给该引导程序</strong>。而引导程序可以通过读取设备的<strong>mbr</strong>分区表，完成操作系统的加载</li><li>ROM中的UEFI有相关的驱动，因此其可以识别分区、文件等数据。因此其通过读取设备的<strong>gpt</strong>分区表，完成操作系统的加载，在此之前<strong>无须转交计算机控制权</strong>。</li></ul><h2 id="制作manjaro启动U盘"><a href="#制作manjaro启动U盘" class="headerlink" title="制作manjaro启动U盘"></a>制作manjaro启动U盘</h2><p>这里我们分别构造适用于<strong>Legacy mode</strong>引导和适用于<strong>UEFI mode</strong>引导的manjaro启动u盘</p><h3 id="适用于Legacy-mode引导"><a href="#适用于Legacy-mode引导" class="headerlink" title="适用于Legacy mode引导"></a>适用于Legacy mode引导</h3><ul><li>首先，按照前面的分析，我们在磁盘上创建MBR分区表，实现磁盘的分区</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk /dev/sdX</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): o</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span></span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended (container <span class="keyword">for</span> logical partitions)</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): </span><br><span class="line">First sector (2048-15646719, default 2048): </span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-15646719, default 15646719):</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): a</span><br><span class="line">Selected partition 1</span><br><span class="line">The bootable flag on partition 1 is enabled now.</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo mkfs.vfat -F32 /dev/sdXn</span><br></pre></td></tr></table></figure><ul><li>接着，向系统分区写入相关的操作系统数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S grub</span><br><span class="line"></span><br><span class="line">sudo mkdir -p /mnt/&#123;iso,usb&#125;</span><br><span class="line">sudo mount -o loop manjaro-kde-21.0.5-210519-linux510.iso /mnt/iso</span><br><span class="line">sudo mount /dev/sdXn /mnt/usb</span><br><span class="line">sudo cp -a /mnt/iso/. /mnt/usb/</span><br><span class="line">sudo umount /mnt/*</span><br></pre></td></tr></table></figure><ul><li>最后，将引导程序写入主引导扇区并完成其他设置即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-install --target=i386-pc --boot-directory=/mnt/usb/boot /dev/sdX</span><br></pre></td></tr></table></figure><p>这里由于manjaro镜像中已经有相关的配置文件<strong>boot/grub/grub.cfg</strong>，因此不需要在配置。此时，已经完成适用于<strong>Legacy mode</strong>的启动u盘</p><h3 id="适用于UEFI-mode引导"><a href="#适用于UEFI-mode引导" class="headerlink" title="适用于UEFI mode引导"></a>适用于UEFI mode引导</h3><p>由于<strong>UEFI mode</strong>会替代<strong>Legacy mode</strong>引导模式，因此这里同样给出适用于<strong>UEFI mode</strong>的引导</p><ul><li>首先，我们在磁盘上创建gpt分区表，实现磁盘的分区。这里需要说明的是，<strong>UEFI mode</strong>引导，其会在<strong>EFI分区(EFI system partition)</strong>中查找引导程序，因此一定需要有<strong>EFI分区/ESP</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sudo fdisk /dev/sdX</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): g                        </span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition number (1-128, default 1): </span><br><span class="line">First sector (2048-15646686, default 2048): </span><br><span class="line">Last sector, +/-sectors or +/-size&#123;K,M,G,T,P&#125; (2048-15646686, default 15646686): </span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): t</span><br><span class="line">Selected partition 1</span><br><span class="line">Partition <span class="built_in">type</span> or <span class="built_in">alias</span> (<span class="built_in">type</span> L to list all): 1</span><br><span class="line">Changed <span class="built_in">type</span> of partition <span class="string">&#x27;Linux filesystem&#x27;</span> to <span class="string">&#x27;EFI System&#x27;</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line"></span><br><span class="line">sudo mkfs.vfat -F32 /dev/sdXn</span><br></pre></td></tr></table></figure><ul><li>接着，向<strong>EFI分区</strong>中写入操作系统相关数据</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /mnt/&#123;iso,usb&#125;</span><br><span class="line"></span><br><span class="line">sudo mount /dev/sdXn /mnt/usb</span><br><span class="line">sudo mount -o loop manjaro-kde-21.0.5-210519-linux510.iso /mnt/iso</span><br><span class="line">sudo cp -a /mnt/iso/. /mnt/usb</span><br><span class="line">sudo umount /mnt/iso</span><br></pre></td></tr></table></figure><ul><li>最后，将引导程序写入<strong>EFI分区</strong>，并完成相关的配置即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-install --removable --no-floppy --target=x86_64-efi --boot-directory=/mnt/usb/boot --efi-directory=/mnt/usb</span><br><span class="line"></span><br><span class="line">sudo umount /mnt/usb</span><br></pre></td></tr></table></figure><p>这里由于manjaro镜像中已经有相关的配置文件<strong>boot/grub/grub.cfg</strong>，因此不需要在配置grub。此时，已经完成适用于<strong>UEFI mode</strong>的启动u盘</p><h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><h2 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h2><p>  在konsole中输入如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><br>  然后从弹出的框中选择一个最好的源即可</p><h2 id="安装yay"><a href="#安装yay" class="headerlink" title="安装yay"></a>安装yay</h2><p>  manjaro除了pacman以外，yay同样是重要的一个软件安装途径，如下进行安装和设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay</span><br><span class="line">yay --aururl <span class="string">&quot;https://aur.tuna.tsinghua.edu.cn&quot;</span> --save</span><br></pre></td></tr></table></figure></p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><h3 id="系统dpi"><a href="#系统dpi" class="headerlink" title="系统dpi"></a>系统dpi</h3><p>  点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，打开<code>System Settings</code>，选择<code>Display Configuration</code>选项，通过设置<strong>Resolution</strong>和<strong>Global scale</strong>完成系统分辨率和DPI的设置<br>  <img src="系统dpi设置.PNG" alt="系统dpi设置"></p><h3 id="字体dpi"><a href="#字体dpi" class="headerlink" title="字体dpi"></a>字体dpi</h3><p>  点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，打开<code>System Settings</code>，选择<code>Appearance =&gt; fonts</code>选项，通过设置<strong>General</strong>、<strong>Fixed width</strong>、<strong>Small</strong>、<strong>Toolbar</strong>、<strong>Menu</strong>和<strong>Window title</strong>以及<strong>Force font DPI</strong>，完成系统中字体DPI的设置<br>  <img src="字体dpi设置.PNG" alt="字体dpi设置"></p><h3 id="登录窗口dpi"><a href="#登录窗口dpi" class="headerlink" title="登录窗口dpi"></a>登录窗口dpi</h3><p>  即manajaro登录界面的dpi，这里通过编辑sddm的设置文件——即<code>/etc/sddm.conf</code>完成，添加或修改如下项的值<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Wayland]</span><br><span class="line">EnableHiDPI=true</span><br><span class="line"></span><br><span class="line">[X11]</span><br><span class="line">EnableHiDPI=true</span><br><span class="line">ServerArguments=-nolisten tcp -dpi 192</span><br></pre></td></tr></table></figure></p><h2 id="安装vmtools-虚拟机中"><a href="#安装vmtools-虚拟机中" class="headerlink" title="安装vmtools(虚拟机中)"></a>安装vmtools(虚拟机中)</h2><p>  在konsole中输入如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S virtualbox-guest-utils open-vm-tools gtkmm gtkmm3</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmtoolsd</span><br></pre></td></tr></table></figure><br>  然后重新启动计算机更新环境即可</p><h2 id="安装输入法"><a href="#安装输入法" class="headerlink" title="安装输入法"></a>安装输入法</h2><h3 id="下载输入法"><a href="#下载输入法" class="headerlink" title="下载输入法"></a>下载输入法</h3><p>在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx5-im fcitx5-rime</span><br></pre></td></tr></table></figure></p><p>通过 <strong>~/.pam_environment</strong> 配置环境变量，写入如下内容<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE DEFAULT=fcitx</span><br><span class="line">QT_IM_MODULE  DEFAULT=fcitx</span><br><span class="line">XMODIFIERS    DEFAULT=\@im=fcitx</span><br></pre></td></tr></table></figure><br>  <br>然后重启更新计算机环境</p><h3 id="配置输入法"><a href="#配置输入法" class="headerlink" title="配置输入法"></a>配置输入法</h3><p>  点击右下角菜单栏的键盘托盘图标，点击<code>设置</code>，添加<code>rime</code>输入法<br>  <img src="配置输入法.PNG" alt="配置输入法"><br>  创建 <strong>~/.local/share/fcitx5/rime/luna_pinyin_simp.custom.yaml</strong>，并输入如下内容<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">patch:</span><br><span class="line">  switches:</span><br><span class="line">    - name: ascii_mode</span><br><span class="line">      reset: 1</span><br><span class="line">      states: [&quot;中文&quot;, &quot;西文&quot;]</span><br><span class="line">    - name: zh_simp</span><br><span class="line">      reset: 1</span><br><span class="line">      states: [&quot;漢字&quot;, &quot;汉字&quot;]</span><br></pre></td></tr></table></figure></p><p>  创建<strong>~/.config/fcitx5/conf/classicui.conf</strong>，并输入如下内容调整输入框的字体设置<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 按屏幕 DPI 使用</span><br><span class="line">PerScreenDPI=True</span><br><span class="line"></span><br><span class="line"># Font (设置成你喜欢的字体)</span><br><span class="line">Font=&quot;Noto Sans Regular 13&quot;</span><br></pre></td></tr></table></figure></p><p>  然后切换至rime输入法，随便输入相关信息，并输入 <code>ctrl + ~</code>，切换至 <strong>朙月拼音·简化字</strong>输入法。最后，点击右下角菜单栏的键盘托盘图标，选择<code>deploy</code>重新部署rime输入法。<br>  然后重启更新计算机环境。<br>  最后点击右下角菜单栏的键盘托盘图标，点击<code>设置</code>，删除<code>Keyboard-English(US)</code>输入法即可</p><h2 id="设置konsole"><a href="#设置konsole" class="headerlink" title="设置konsole"></a>设置konsole</h2><h3 id="关闭yakuake"><a href="#关闭yakuake" class="headerlink" title="关闭yakuake"></a>关闭yakuake</h3><p>  即点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，打开<code>System Settings</code>，选择<code>Workspace =&gt; Startup and Shutdown =&gt; Autostart</code>选项，删除<strong>yakuake</strong>项。<br>  <img src="关闭yakuake.png" alt="关闭yakuake"></p><h3 id="设置快捷键"><a href="#设置快捷键" class="headerlink" title="设置快捷键"></a>设置快捷键</h3><p>  即点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，打开<code>System Settings</code>，选择<code>Workspace =&gt; Shortcuts =&gt; Shortcuts</code>选项，点击 <strong>Add Application</strong>选项，添加<code>konsole</code>，并设置相关的快捷键即可。<br>  <img src="设置konsole快捷键.PNG" alt="设置konsole快捷键"></p><h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>  打开konsole，在界面上方的<code>Settings =&gt; Edit Current Profile</code>，选择<code>Appearance</code>，在<strong>Font</strong>对应字段进行设置即可<br>  <img src="设置konsole字体.PNG" alt="设置konsole字体"></p><h2 id="设置护眼"><a href="#设置护眼" class="headerlink" title="设置护眼"></a>设置护眼</h2><p>  这里使用跨平台的<strong>Stretchly</strong>软件，进行定时的息屏休息功能</p><h3 id="安装Stretchly"><a href="#安装Stretchly" class="headerlink" title="安装Stretchly"></a>安装Stretchly</h3><p>  首先在<a href="https://github.com/hovancik/stretchly/releases">链接</a>中，下载<em>Stretchly-[version].pacman</em>文件</p><p>  在konsole中执行如下bash命令，完成软件的安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -U $(ls | grep <span class="string">&quot;Stretchly&quot;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="配置Stretchly"><a href="#配置Stretchly" class="headerlink" title="配置Stretchly"></a>配置Stretchly</h3><p>  首先，设置其为自动启动程序，即点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，打开<code>System Settings</code>，选择<code>Workspace =&gt; Startup and Shutdown =&gt; Autostart</code>选项，添加<strong>Stretchly</strong>项。</p><p>  <img src="自动启动stretchly.PNG" alt="设置stretchly自动启动"></p><p>  接着启动<em>Stretchly</em>，完成软件的设置即可。即点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，在搜索框输入<strong>Stretchly</strong>，然后点击软件即可。之后按照软件的引导，完成相关的配置即可</p><p>  <img src="启动stretchly.PNG" alt="启动stretchly"></p><h2 id="设置python"><a href="#设置python" class="headerlink" title="设置python"></a>设置python</h2><h3 id="安装python3"><a href="#安装python3" class="headerlink" title="安装python3"></a>安装python3</h3><p>  系统已经默认安装</p><h3 id="安装pip3"><a href="#安装pip3" class="headerlink" title="安装pip3"></a>安装pip3</h3><p>  系统已经默认安装</p><h3 id="安装python2"><a href="#安装python2" class="headerlink" title="安装python2"></a>安装python2</h3><p>在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S python2</span><br></pre></td></tr></table></figure></p><h3 id="安装pip2"><a href="#安装pip2" class="headerlink" title="安装pip2"></a>安装pip2</h3><p>在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S python2-pip</span><br></pre></td></tr></table></figure></p><h3 id="配置pip"><a href="#配置pip" class="headerlink" title="配置pip"></a>配置pip</h3><p>在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip2 install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br><span class="line">pip2 config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U</span><br><span class="line">pip3 config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><h2 id="设置C-C"><a href="#设置C-C" class="headerlink" title="设置C/C++"></a>设置C/C++</h2><p>在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gcc</span><br></pre></td></tr></table></figure></p><h2 id="设置Java"><a href="#设置Java" class="headerlink" title="设置Java"></a>设置Java</h2><p>在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S jdk11-openjdk</span><br></pre></td></tr></table></figure></p><h2 id="设置Git"><a href="#设置Git" class="headerlink" title="设置Git"></a>设置Git</h2><h3 id="初始化用户信息"><a href="#初始化用户信息" class="headerlink" title="初始化用户信息"></a>初始化用户信息</h3><p>在konsole中执行如下bash命令，其中相关的参数填写个人信息即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;hawk&quot;</span></span><br><span class="line">git config --global user.email 18801353760@163.com</span><br></pre></td></tr></table></figure></p><h3 id="导出公、私钥"><a href="#导出公、私钥" class="headerlink" title="导出公、私钥"></a>导出公、私钥</h3><p>首先，如果没有相关的公、私钥，可以参考<a href="https://gitee.com/help/articles/4229">帮助链接</a>，生成自己的公、私钥</p><p>这里将公、私钥进行压缩，并进行加密处理，在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git_name=hawk</span><br><span class="line">git_email=18801353760@163.com</span><br><span class="line">git_passwd=</span><br><span class="line"></span><br><span class="line">tar -zcvf ssh.tar.gz -C ~ --exclude .ssh/known_hosts .ssh/</span><br><span class="line"></span><br><span class="line">K=$(<span class="built_in">echo</span> <span class="variable">$&#123;git_passwd&#125;</span><span class="variable">$&#123;git_name&#125;</span><span class="variable">$&#123;git_email&#125;</span> | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">iv=$(<span class="built_in">echo</span> <span class="variable">$&#123;git_passwd&#125;</span><span class="variable">$&#123;git_name&#125;</span> | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">openssl enc -aes-256-cbc -e -<span class="keyword">in</span> ssh.tar.gz -out ssh.dec -K <span class="variable">$&#123;K&#125;</span> -iv <span class="variable">$&#123;iv&#125;</span></span><br></pre></td></tr></table></figure></p><h3 id="导入公、私钥"><a href="#导入公、私钥" class="headerlink" title="导入公、私钥"></a>导入公、私钥</h3><p>即导入上述导出的公、私钥，这里给出我自己的加密后的<a href="ssh.dec">公、私钥</a><br>然后对文件首先进行解密处理，最后解压缩即可，在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git_name=hawk</span><br><span class="line">git_email=18801353760@163.com</span><br><span class="line">git_passwd=</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">K=$(<span class="built_in">echo</span> <span class="variable">$&#123;git_passwd&#125;</span><span class="variable">$&#123;git_name&#125;</span><span class="variable">$&#123;git_email&#125;</span> | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">iv=$(<span class="built_in">echo</span> <span class="variable">$&#123;git_passwd&#125;</span><span class="variable">$&#123;git_name&#125;</span> | md5sum | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">openssl enc -aes-256-cbc -d -<span class="keyword">in</span> ssh.dec -out ssh.tar.gz -K <span class="variable">$&#123;K&#125;</span> -iv <span class="variable">$&#123;iv&#125;</span></span><br><span class="line"></span><br><span class="line">tar -zxvf ssh.tar.gz -C ~/</span><br><span class="line">chmod 700 -R ~/.ssh</span><br></pre></td></tr></table></figure></p><h2 id="设置SSR代理"><a href="#设置SSR代理" class="headerlink" title="设置SSR代理"></a>设置SSR代理</h2><p>这里通过安装<strong>electron-ssr</strong>，实现代理上网</p><h3 id="下载electron-ssr代理"><a href="#下载electron-ssr代理" class="headerlink" title="下载electron-ssr代理"></a>下载electron-ssr代理</h3><p>从<a href="https://github.com/shadowsocksrr/electron-ssr/releases">https://github.com/shadowsocksrr/electron-ssr/releases</a>点击下载<strong> *.pacman</strong>文件</p><p>执行下列文件，完成<strong>electron-ssr</strong>的安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -U $(ls | grep <span class="string">&quot;pacman&quot;</span>) &amp;&amp; sudo rm -rf $(ls | grep <span class="string">&quot;pacman&quot;</span>)</span><br></pre></td></tr></table></figure></p><p>可以点击屏幕左下角的<code>application launcher</code>，或者点击<code>Win</code>建，打开<code>All Applications</code>，即可找到<strong>electron-ssr</strong>，同时可以将其拖拽到菜单中，方便打开<br><img src="安装electron-ssr.PNG" alt="安装electron-ssr"></p><h3 id="设置electron-ssr代理"><a href="#设置electron-ssr代理" class="headerlink" title="设置electron-ssr代理"></a>设置electron-ssr代理</h3><p>首先打开<strong>eletron-ssr</strong>，点击上侧菜单栏的<strong>Settings</strong>，并选择<strong>option</strong>，完成如下配置<br><img src="eletron-ssr options配置.PNG" alt="eletron-ssr options配置"></p><p>选择上侧中间的<strong>订阅管理</strong>，添加相关的订阅信息<em>(通过输入回车键确认)</em><br><img src="eletron-ssr 节点订阅.PNG" alt="eletron-ssr 节点订阅"></p><p>接着，在右下角系统托盘处，右键<strong>eletron-ssr</strong>图标，在<strong>系统代理模式</strong>中选择<strong>PAC模式</strong><br><img src="eletron-ssr 代理模式.PNG" alt="eletron-ssr 代理模式"></p><p>最后，在右下角系统托盘处，通过<strong>服务器</strong>选择代理服务器；通过<strong>开启应用</strong>完成代理开启</p><h3 id="配置proxychains"><a href="#配置proxychains" class="headerlink" title="配置proxychains"></a>配置proxychains</h3><p>大部分时候，打开<strong>eletron-ssr</strong>，可以实现数据走系统代理<br>但是类似于命令行等的数据并不走系统代理，因此需要通过<strong>proxychains</strong>完成相关的代理</p><p>首先执行如下命令完成代理<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S proxychians</span><br></pre></td></tr></table></figure></p><p>接着，需要修改全局代理链，将<strong>/etc/proxychains.conf</strong>文件的代理修改如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ProxyList]</span><br><span class="line">socks5  127.0.0.1 1080</span><br></pre></td></tr></table></figure></p><p>上述端口为<strong>electron-ssr</strong>中监听的本地端口即可<br>之后，通过<code>proxychains -q [待执行命令]</code>，完成代理</p><h2 id="设置QEMU"><a href="#设置QEMU" class="headerlink" title="设置QEMU"></a>设置QEMU</h2><blockquote><p><strong>qemu</strong>是一个广泛使用的开源计算机模拟器和虚拟机</p></blockquote><p>  因此，这里使用qemu提供manjaro上的虚拟机功能</p><h3 id="安装qemu"><a href="#安装qemu" class="headerlink" title="安装qemu"></a>安装qemu</h3><p>这里安装qemu相关的依赖和功能软件包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qemu ovmf bridge-utils vde2 dnsmasq ebtables openbsd-netcat</span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th style="text-align:center">软件包</th><th style="text-align:center">功能</th></tr></thead><tbody><tr><td style="text-align:center">ovmf</td><td style="text-align:center">UEFI支持</td></tr><tr><td style="text-align:center">bridge-utils</td><td style="text-align:center">网络桥接支持</td></tr><tr><td style="text-align:center">vde2</td><td style="text-align:center">以太网支持</td></tr><tr><td style="text-align:center">dnsmasq ebtables</td><td style="text-align:center">NAT/DHCP网络</td></tr><tr><td style="text-align:center">openbsd-netcat</td><td style="text-align:center">ssh连接虚拟机支持</td></tr></tbody></table></div><h3 id="安装图形化前端管理"><a href="#安装图形化前端管理" class="headerlink" title="安装图形化前端管理"></a>安装图形化前端管理</h3><p>这里选择<strong>virt-manager</strong>作为管理KVM虚拟机的前端。而virt-manager依赖于libvirt的提供的接口，因此安装virt-manager及其依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S virt-manager virt-viewer libvirt</span><br></pre></td></tr></table></figure></p><p>然后启动libvirtd服务，并将网络设置为自动启动即可<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> libvirtd</span><br><span class="line">sudo systemctl start libvirtd</span><br><span class="line"></span><br><span class="line">sudo virsh net-autostart default</span><br></pre></td></tr></table></figure></p><h3 id="配置win10虚拟机"><a href="#配置win10虚拟机" class="headerlink" title="配置win10虚拟机"></a>配置win10虚拟机</h3><h4 id="下载win10ISO文件"><a href="#下载win10ISO文件" class="headerlink" title="下载win10ISO文件"></a>下载win10ISO文件</h4><p>前往<a href="https://next.itellyou.cn/">ITELLYOU</a>，下载官方win10的ISO镜像文件</p><h4 id="下载virtio-win驱动"><a href="#下载virtio-win驱动" class="headerlink" title="下载virtio-win驱动"></a>下载virtio-win驱动</h4><p>为了提高虚拟机性能，虚拟机会使用virtIO技术，而windows客户机需要手动安装该驱动</p><p>首先，点击<a href="https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso">链接</a>下载相关驱动</p><h4 id="启动virt-manager"><a href="#启动virt-manager" class="headerlink" title="启动virt-manager"></a>启动virt-manager</h4><p>执行如下命令启动<strong>virt-manager</strong>管理程序<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo virt-manager</span><br></pre></td></tr></table></figure></p><p><img src="启动virt-manager.PNG" alt="启动virt-manager"></p><h4 id="新建虚拟机"><a href="#新建虚拟机" class="headerlink" title="新建虚拟机"></a>新建虚拟机</h4><p>在<strong>virt-manager</strong>界面的上方菜单，点击最左侧的<strong>创建新的虚拟机</strong>按钮<br><img src="点击创建新的虚拟机按钮.PNG" alt="点击创建新的虚拟机按钮"></p><p>选择从本地镜像安装，<code>x86_64</code>架构，点击右下角<strong>Forward</strong>下一步<br><img src="选择镜像.PNG" alt="选择镜像界面"></p><p>点击该界面上方的<strong>Browse</strong>界面，选择ISO位置，界面如下所示<br><img src="管理存储池界面.PNG" alt="管理存储池界面"></p><p>这里选择右下角第一个<strong>Browse Local</strong>，选择前面下载的win10的ISO镜像即可<br><img src="选择win10镜像.PNG" alt="选择win10镜像"></p><p>该界面下方取消<strong>自动检测系统</strong>，直接选择windows10系统<br><img src="选择操作系统为win10.PNG" alt="选择操作系统为win10"></p><p>点击右下角的<strong>Forward</strong>下一步，设置内存和CPU信息<br><img src="设置内存和CPU.PNG" alt="设置内存和CPU"></p><p>点击右下角的<strong>Forward</strong>下一步，设置磁盘信息<br><img src="设置虚拟机磁盘.PNG" alt="设置虚拟机磁盘"></p><p>点击右下角的<strong>Forward</strong>下一步，选择在启动前编辑选项<br><img src="在启动前编辑虚拟机.PNG" alt="在启动前编辑虚拟机"></p><p>点击右下角的<strong>Finish</strong>，进入虚拟机的编辑界面，完成相关的编辑<br><img src="虚拟机编辑界面.PNG" alt="虚拟机编辑界面"></p><p>在这里添加另一个CDROM设置，其文件是前面下载的Virtio驱动文件，如下所示<br><img src="添加Virtio驱动CDROM.PNG" alt="添加Virtio驱动CDROM"></p><p>完成编辑后，点击右上角的<strong>Begin Installation</strong>，完成虚拟机的安装</p><p>这里特别说明的是，当进行到<strong>你想将Windows安装在哪里</strong>时，其无法显示磁盘信息，如下所示<br><img src="未加载Virtio驱动程序.PNG" alt="未加载Virtio驱动程序"></p><p>点击左下角<strong>加载驱动程序</strong>，选择相关的驱动程序安装即可<br><img src="安装Virtio驱动程序.PNG" alt="安装Virtio驱动程序"></p><h4 id="配置VirtIO-guest-tools"><a href="#配置VirtIO-guest-tools" class="headerlink" title="配置VirtIO guest tools"></a>配置VirtIO guest tools</h4><p>为了启用主机和虚拟机之间的剪切板共享，需要在虚拟机中安装VirtIO guest tools，点击<a href="https://www.spice-space.org/download/binaries/spice-guest-tools/">https://www.spice-space.org/download/binaries/spice-guest-tools/</a>下载安装即可</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="Failed-to-start-Load-Save-Screen-Backlight-Brightness-of-backlight-acpi-video0"><a href="#Failed-to-start-Load-Save-Screen-Backlight-Brightness-of-backlight-acpi-video0" class="headerlink" title="Failed to start Load/Save Screen Backlight Brightness of backlight:acpi_video0"></a>Failed to start Load/Save Screen Backlight Brightness of backlight:acpi_video0</h2><p>  这里实际上系统使用了两种服务保存并载入背光设置，一个为<code>systemd-backlight@backlight:acpi_video0</code>；另一个为<code>systemd-backlight@backlight:amdgpu_b10</code>。对于AMD集显来说，第一个出错，会使用第二种设置，则直接mask掉第一个服务即可，在konsole中执行如下bash命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl mask systemd-backlight@backlight:acpi_video0</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
            <tag> 系统启动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Butterfly主题的hexo静态博客</title>
      <link href="/2021/05/24/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/"/>
      <url>/2021/05/24/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  基于hexo的静态博客一般分为两部分——静态博客的前端资源，和生成这些资源的设置信息。这里为了管理方便，将这两部分放置在仓库管理的一个仓库的两个分支中。从而可以在任意主机上，通过拉取设置信息所在分支数据，构建编写博客的环境；而将编写好的博客推送到静态博客的前端资源所在的分支中，完成博客的更新。这样子，我们可以在任何主机上，快速同步之前的博客编写环境，并快速更新博客。</p><h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><p>  我们需要通过git与仓库管理网站进行交互，点此<a href="https://mirrors.tuna.tsinghua.edu.cn/github-release/git-for-windows/git/">镜像链接</a>，进行下载并安装。</p><p>  我们需要简单配置git，使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name `user name`</span><br><span class="line">git config --global user.email `user email`</span><br></pre></td></tr></table></figure><p>  这里可以通过<a href="https://gitee.com/help/articles/4229#article-header0">教程链接</a>，完成相关git的配置</p><h1 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h1><p>  Hexo是基于Node.js，因此我们需要安装和配置。首先点此<a href="http://nodejs.cn/download/">下载链接</a>，下载并安装Node.js。<br>  为了提高安装的效率，我们更换其按镜像源，使用如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">npm config <span class="built_in">set</span> phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/</span><br><span class="line">npm config <span class="built_in">set</span> electron_mirror=https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure><h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><p>  根据<a href="https://hexo.io/zh-cn/docs/">Hexo官网</a>进行相关的安装。<br>  执行如下命令，完成Hexo的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><h1 id="搭建博客生成环境"><a href="#搭建博客生成环境" class="headerlink" title="搭建博客生成环境"></a>搭建博客生成环境</h1><p>  这里完成最终生成静态博客相关的前端资源的环境。相关的设置信息会被推送到仓库的<strong>develop</strong>分支，以方便在任何主机上同步该环境。</p><h2 id="初始化工作目录"><a href="#初始化工作目录" class="headerlink" title="初始化工作目录"></a>初始化工作目录</h2><p>  首先选定一个路径，在该路径下初始化工作目录，不妨记为<strong>working_dir</strong>，作为该环境的工作目录，命令如下所示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo.cmd init `working_dir`</span><br></pre></td></tr></table></figure><p>  前面已经介绍，这些设置会被同步到仓库中，因此这里完成仓库初始化，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>  这里需要通过编辑<strong>working_dir/.gitignore</strong>文件，添加该工作目录中那些文件作为无关文件，不会被同步到仓库相关分支中，这里首先填写一部分，内容如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">*-lock.json</span><br></pre></td></tr></table></figure><h2 id="设置博客配置"><a href="#设置博客配置" class="headerlink" title="设置博客配置"></a>设置博客配置</h2><p>  这里通过修改<strong>working_dir/_config.yml</strong>，完成博客的主要配置信息的设置，通过<a href="https://hexo.io/zh-cn/docs/configuration">该链接</a>查找大部分配置的可选参数和含义。</p><h3 id="修改网站信息"><a href="#修改网站信息" class="headerlink" title="修改网站信息"></a>修改网站信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&quot;Jiawei Hawk&#x27;s blog&quot;</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&quot;blog&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;This is Jiawei Hawk&#x27;s blog&quot;</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">&quot;Jiawei Hawk&quot;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">&quot;Jiawei Hawk&quot;</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">&quot;zh-CN&quot;</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br></pre></td></tr></table></figure><p>  这里分别设置了网站名称、网站子名称、网站描述、网站关键词、作者、网站语言和时间区域</p><h3 id="修改网页URL信息"><a href="#修改网页URL信息" class="headerlink" title="修改网页URL信息"></a>修改网页URL信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://jiaweihawk.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>  这里分别为网站url，网页的永久链接形式等</p><h3 id="修改博客前端资源目录位置"><a href="#修改博客前端资源目录位置" class="headerlink" title="修改博客前端资源目录位置"></a>修改博客前端资源目录位置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Directory</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br></pre></td></tr></table></figure><p>  这里指定博客的资源最终的位置。前面已经说过，该仓库将博客前端资源和配置博客环境的设置分别进行存储，而这里博客前端资源最终会生成在<strong>public_dir</strong>对应的路径。因此我们通过在<strong>working_dir/.gitignore</strong>中添加该路径，避免最终同步设置时将生成的博客前端资源一并进行同步，<strong>working_dir/.gitignore</strong>中默认已经添加该路径。如果设置变化了，需要进行相关的更新。</p><h2 id="设置博客主题"><a href="#设置博客主题" class="headerlink" title="设置博客主题"></a>设置博客主题</h2><p>  如果对于博客默认的主题不是很喜欢，可以按照<a href="https://hexo.io/zh-cn/docs/themes">官网教程</a>，方便的更换博客主题</p><h3 id="下载博客主题"><a href="#下载博客主题" class="headerlink" title="下载博客主题"></a>下载博客主题</h3><p>  这里选择Butterfly主题，其也有<a href="https://butterfly.js.org/">官方教程</a>可以进行查看，这里给出本博客的设置。<br>  在<strong>working_dir</strong>工作目录下，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><p>  这里由于我们会对主题进行相关的设置更改，因此需要避免嵌套git项目，即删除<strong>working_dir/themes/butterfly/.git</strong>文件即可</p><h3 id="指定博客主题"><a href="#指定博客主题" class="headerlink" title="指定博客主题"></a>指定博客主题</h3><p>  由于Butterfly主题依赖一些第三方插件，因此需要在<strong>working_dir</strong>工作目录下执行命令安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>  修改<strong>working_dir/_config.yml</strong>中的<strong>theme</strong>设置的值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><p>  此时，已经完成了Butterfly主题的使用</p><h3 id="修改博客主题细节"><a href="#修改博客主题细节" class="headerlink" title="修改博客主题细节"></a>修改博客主题细节</h3><p>  类似于前面博客的设置更改，可以通过修改<strong>working_dir/themes/butterfly/_config.yml</strong>文件，完成博客主题的主要配置信息的设置</p><h4 id="设置菜单栏"><a href="#设置菜单栏" class="headerlink" title="设置菜单栏"></a>设置菜单栏</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">主页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">归档:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="comment"># List||fas fa-list:</span></span><br><span class="line">  <span class="comment">#   Music: /music/ || fas fa-music</span></span><br><span class="line">  <span class="comment">#   Movie: /movies/ || fas fa-video</span></span><br><span class="line">  <span class="comment"># Link: /link/ || fas fa-link</span></span><br><span class="line">  <span class="comment"># About: /about/ || fas fa-heart</span></span><br></pre></td></tr></table></figure><p>  这里通过取消注释，选择菜单栏显示相关的菜单。这里可以参考<a href="https://xiabor.com/4215.html#%E8%8F%9C%E5%8D%95%E6%A0%8F%E8%AE%BE%E7%BD%AE">这位大佬的博客</a>，进行更多的外链的设置显示</p><p>  该菜单栏引入了主页、归档、标签和分类。其中标签页和分类页需要手动创建，否则会显示无法打开。<br>  首先在<strong>working_dir</strong>工作目录下，执行如下命令创建标签页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>  然后修改<strong>working_dir/source/tags/index.md</strong>文件的type字段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;标签&quot;</span><br><span class="line">date: 2021-05-26 22:04:20</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><p>  类似的，在<strong>working_dir</strong>工作目录下，执行如下命令创建分类页</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo.cmd new page categories</span><br></pre></td></tr></table></figure><p>  然后同样修改<strong>working_dir/source/categories/index.md</strong>文件的type字段</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;分类&quot;</span><br><span class="line">date: 2021-05-26 22:06:23</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h4 id="设置博客背景图片"><a href="#设置博客背景图片" class="headerlink" title="设置博客背景图片"></a>设置博客背景图片</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The banner image of home page</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">https://picture.zwc365.com/getbing.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If the banner of page not setting, it will show the top_img</span></span><br><span class="line"><span class="attr">default_top_img:</span> <span class="string">/img/background.jpg</span></span><br></pre></td></tr></table></figure><p>  这里修改了主页的默认背景图片，其中<code>index_img</code>为主页背景图片的外链；对于<code>default_top_img</code>，其使用本地的图片作为默认的顶部背景图片，该图片的地址为<strong>working_dir/themes/butterfly\source/img/background.jpg</strong></p><h4 id="设置主页描述"><a href="#设置主页描述" class="headerlink" title="设置主页描述"></a>设置主页描述</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Display the article introduction on homepage</span></span><br><span class="line"><span class="comment"># 1: description</span></span><br><span class="line"><span class="comment"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span></span><br><span class="line"><span class="comment"># 3: auto_excerpt (default)</span></span><br><span class="line"><span class="comment"># false: do not show the article introduction</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><p>  即这里根据注释说明，选择模式2，从而在浏览每一篇博客缩略界面时，展示相关信息。</p><h4 id="设置代码显示"><a href="#设置代码显示" class="headerlink" title="设置代码显示"></a>设置代码显示</h4><p>  首先，修改<strong>working_dir/_config.yml</strong>中的<strong>hljs</strong>设置的值，将其关闭<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>  接着，修改<strong>working_dir/themes/butterfly/_config.yml</strong>中如下值，将代码主题设置为mac主题，其余皆为默认设置，使代码更加美观</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Code Blocks (代碼相關)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">highlight_theme:</span> <span class="string">mac</span> <span class="comment">#  darker / pale night / light / ocean / mac / mac light / false</span></span><br><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span> <span class="comment"># copy button</span></span><br><span class="line"><span class="attr">highlight_lang:</span> <span class="literal">true</span> <span class="comment"># show the code language</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">false</span> <span class="comment"># true: shrink the code blocks / false: expand the code blocks | none: expand code blocks and hide the button</span></span><br><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="设置文章meta显示"><a href="#设置文章meta显示" class="headerlink" title="设置文章meta显示"></a>设置文章meta显示</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span> <span class="comment"># Home Page</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章頁日期是創建日或者更新日或都顯示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span> <span class="comment"># date/relative 顯示日期還是相對日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示分類</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章頁是否顯示標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 顯示描述性文字</span></span><br></pre></td></tr></table></figure><p>  这里设置主页中文件显示标签信息，更方便获取文章信息</p><h4 id="设置文章版权"><a href="#设置文章版权" class="headerlink" title="设置文章版权"></a>设置文章版权</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br></pre></td></tr></table></figure><p>  这里对于文章版权和许可协议，将其网址解码功能打开，从而正常显示中文网站</p><h4 id="设置文章锚点"><a href="#设置文章锚点" class="headerlink" title="设置文章锚点"></a>设置文章锚点</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post, the URL will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>  即开启文章锚点功能，从而每次翻动文章时，其URL都会进行相应的更改，其会在网页中留下历史记录。</p><h4 id="设置文章分页按钮"><a href="#设置文章分页按钮" class="headerlink" title="设置文章分页按钮"></a>设置文章分页按钮</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分頁)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p>  通过开启文章分页按钮，并设置为模式2，文章结束处会显示上一篇和下一篇文章的跳转信息</p><h4 id="设置账户头像"><a href="#设置账户头像" class="headerlink" title="设置账户头像"></a>设置账户头像</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Avatar (頭像)</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/profile.jpg</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>  这里通过设置img的路径信息即可。这里的根目录为<strong>working_dir/themes/butterfly/source</strong>，将头像放置在该位置即可。</p><h4 id="设置博客Footer"><a href="#设置博客Footer" class="headerlink" title="设置博客Footer"></a>设置博客Footer</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Footer Settings</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2021</span></span><br><span class="line">  <span class="attr">custom_text:</span> <span class="string">&quot;Come to pwn me!!&quot;</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">false</span> <span class="comment"># Copyright of theme and framework</span></span><br></pre></td></tr></table></figure><p>  这里设置了博客角标的显示信息，关闭了copyright内容，并加入了自己的自定义信息</p><h4 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change font size</span></span><br><span class="line"><span class="attr">change_font_size:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Conversion between Traditional and Simplified Chinese (簡繁轉換)</span></span><br><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># The text of a button</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">繁</span></span><br><span class="line">  <span class="comment"># the language of website (1 - Traditional Chinese/ 2 - Simplified Chinese）</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">2</span></span><br><span class="line">  <span class="comment"># Time delay</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Simplified Chinese</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&#x27;繁&#x27;</span></span><br><span class="line">  <span class="comment"># The text of the button when the language is Traditional Chinese</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&#x27;簡&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Read Mode (閲讀模式)</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Toggle Button to switch dark/light mode</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  Following System Settings, if the system doesn&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lightbox (圖片大圖查看模式)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># You can only choose one, or neither (只能選擇一個 或者 兩個都不選)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># medium-zoom</span></span><br><span class="line"><span class="comment"># https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line"><span class="attr">medium_zoom:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># fancybox</span></span><br><span class="line"><span class="comment"># http://fancyapps.com/fancybox/3/</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>  这里关闭了简繁转换、阅读模式和夜间模式等按钮</p><h4 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># aside (側邊欄)</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;coder &amp;&amp; ctfer&quot;</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/JiaweiHawk</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">&quot;This is hawk&#x27;s blog&quot;</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="literal">false</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># busuanzi count for PV / UV in site</span></span><br><span class="line"><span class="comment"># 訪問人數</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="comment"># Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">publish_date:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># You can only choose one, or neither</span></span><br><span class="line">  <span class="attr">valine:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">github_issues:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">repo:</span></span><br><span class="line">  <span class="attr">disqus:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">forum:</span></span><br><span class="line">    <span class="attr">api_key:</span></span><br><span class="line">  <span class="attr">twikoo:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">waline:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>  这里关闭了隐藏主页的按钮，修改了主页的个人信息部分的设置，并且关闭了公告和网站信卡片，并关闭了诸如访问人数、运行时间和最新评论的无关信息。</p><h4 id="设置数学支持"><a href="#设置数学支持" class="headerlink" title="设置数学支持"></a>设置数学支持</h4><p>数学公式支持依赖第三方库，因此在 <strong>working_dir</strong>工作目录下执行如下命令，安装该依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p><p>然后修改<strong>working_dir/themes/butterfly/_config.yml</strong>中的设置信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mathjax:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># true 表示每一页都加载mathjax.js</span></span><br><span class="line">  <span class="comment"># false 需要时加载，须在使用的Markdown Front-matter 加上 mathjax: true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>最后，还需要修改 <strong>working_dir/_config.yml</strong>中的设置信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MathJax</span></span><br><span class="line"><span class="attr">kramed:</span></span><br><span class="line">  <span class="attr">gfm:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">pedantic:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">sanitize:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tables:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartLists:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">smartypants:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>这里尝试使用如下语句测试其数学公式引用效果<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这里引用变量<span class="code">`$a_i$`</span></span><br><span class="line">$$\sigma = x<span class="emphasis">_1 + y_</span>1$$</span><br></pre></td></tr></table></figure></p><p>结果如下所示</p><blockquote><p>这里引用变量<script type="math/tex">a_i</script></p><script type="math/tex; mode=display">\sigma = x_1 + y_1</script></blockquote><h4 id="设置搜索系统"><a href="#设置搜索系统" class="headerlink" title="设置搜索系统"></a>设置搜索系统</h4><p>  本地搜索依赖第三方库，因此在<strong>working_dir</strong>工作目录下执行如下命令，安装该依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>  直接修改博客中的主题设置，打开本地搜索</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="设置页面资源引用"><a href="#设置页面资源引用" class="headerlink" title="设置页面资源引用"></a>设置页面资源引用</h4><p>  修改博客中的相关设置，打开相对引用功能</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>  之后，我们在README中使用如下语句测试其图片引用和文件引用的效果<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">background</span>](<span class="link">background.jpg</span>)</span><br><span class="line">[<span class="string">background</span>](<span class="link">background.jpg</span>)</span><br></pre></td></tr></table></figure></p><p>  则其会引用<strong>working_dir/source/_posts/<code>filename</code>/background.jpg</strong>的资源，效果如下图所示<br>  <img src="background.jpg" alt="效果图"><br>  <a href="background.jpg">文件链接</a></p><h4 id="设置页面美化"><a href="#设置页面美化" class="headerlink" title="设置页面美化"></a>设置页面美化</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Beautify (美化頁面顯示)</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># site/post</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span> <span class="string">&#x27;\f024&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span> <span class="string">&#x27;#F47466&#x27;</span></span><br></pre></td></tr></table></figure><p>  这里开启页面美化，自动更改<strong>ol</strong>、<strong>ul</strong>和<strong>h1</strong>-<strong>h5</strong>的样式</p><h4 id="设置页面字体"><a href="#设置页面字体" class="headerlink" title="设置页面字体"></a>设置页面字体</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Global font settings</span></span><br><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要不要修改)</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span> <span class="string">13pt</span></span><br><span class="line">  <span class="attr">code-font-size:</span> <span class="string">11pt</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br><span class="line">  <span class="attr">code-font-family:</span></span><br></pre></td></tr></table></figure><p>  这里修改了全局页面字体的大小设置</p><h4 id="设置字数统计"><a href="#设置字数统计" class="headerlink" title="设置字数统计"></a>设置字数统计</h4><p>  文章字数统计依赖第三方库，因此在<strong>working_dir</strong>工作目录下执行如下命令，安装该依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><p>  直接修改博客中的主题设置，打开文章统计，并且关闭网站总字数统计即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wordcount (字數統計)</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h2 id="设置博客部署配置"><a href="#设置博客部署配置" class="headerlink" title="设置博客部署配置"></a>设置博客部署配置</h2><p>  博客部署同样依赖第三方库，因此在<strong>working_dir</strong>工作目录下执行如下命令，安装该依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>  然后，修改<strong>working_dir/_config.yml</strong>中的deploy配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/JiaweiHawk/jiaweihawk.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&quot;deploy&quot;</span></span><br></pre></td></tr></table></figure><p>  这里就完成了博客部署的设置，具体的部署操作在下面一起讲解</p><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><p>  根据最开始所说，仓库中会有两个分支：一个<strong>develop</strong>分支，用于存储博客环境的设置信息；另一个是<strong>deploy</strong>分支，其存储用于部署的博客前端资源。其中在设置github pages或其他服务器时，需要注意一下绑定的仓库分支即可</p><p>  对于更新或拉取博客设置信息，从而快速恢复博客的生成环境，在<strong>working_dir</strong>目录下执行下列命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b develop git@github.com:JiaweiHawk/jiaweihawk.github.io.git</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>  对于有新的博客要推送，或更新已有的博客到远程服务器上，则在<strong>working_dir</strong>目录下执行下列命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo.cmd clean</span><br><span class="line">hexo.cmd generate</span><br><span class="line">hexo.cmd deploy</span><br></pre></td></tr></table></figure><p>  这里最后在特别说明一下：在更新博客到远程服务器之前，可以在本地进行查看，执行如下命令，即可在<strong>http:\/\/localhost:4000</strong>网址进行查看。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo.cmd clean</span><br><span class="line">hexo.cmd generate</span><br><span class="line">hexo.cmd server</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设置 </tag>
            
            <tag> nodejs </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
